generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String  @unique
    hash     String
    hashedRt String?

    nickname               String
    isEmailConfirmed       Boolean @default(false)
    emailConfirmationToken String  @default("")

    requestedBy  Follow[]   @relation("requestedBy")
    requested    Follow[]   @relation("requested")
    sentMessages Message[]  @relation("sentMessages")
    chats        ChatUser[]
    players      Player[]   @relation("UserPlayers")
    role         ROLE       @default(USER)
}

enum FollowStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Follow {
    id            String @id @default(uuid())
    requestedBy   User   @relation("requestedBy", fields: [requestedById], references: [id])
    requestedById String
    requested     User   @relation("requested", fields: [requestedId], references: [id])
    requestedId   String

    status    FollowStatus @default(PENDING)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Message {
    id        String   @id @default(uuid())
    text      String
    senderId  String
    sender    User     @relation(name: "sentMessages", fields: [senderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
}

enum ChatType {
    MUTUAL
    PRIVATE
    GAME
}

model Chat {
    id           String     @id @default(uuid())
    type         ChatType
    messages     Message[]
    participants ChatUser[]
}

model ChatUser {
    id       String   @id @default(uuid())
    joinedAt DateTime @default(now())
    chatId   String
    Chat     Chat     @relation(fields: [chatId], references: [id])
    userId   String
    user     User     @relation(fields: [userId], references: [id])
}

enum GameStatus {
    LOBBY
    ACTIVE
    FINISHED
}

model Game {
    id                String             @id @default(uuid())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    playersCapacity   Int                @default(4)
    status            GameStatus         @default(LOBBY)
    turnOfUserId      String?
    timeOfTurn        Int                @default(120)
    players           Player[]           @relation("GamePlayers")
    gameFields        GameField[]
    gameMoves         GameMoves[]        @relation("GameMovesGame")
    fieldTransactions FieldTransaction[] @relation("FieldTransactionGame")
    fields            Field[]            @relation("GameFieldRelation")
}

model Player {
    id                String             @id @default(uuid())
    money             Float              @default(0)
    userId            String
    user              User               @relation(name: "UserPlayers", fields: [userId], references: [id])
    gameId            String
    game              Game               @relation(name: "GamePlayers", fields: [gameId], references: [id])
    gameMoves         GameMoves[]
    transactions      Transaction[]
    gameFields        GameField[]
    fieldTransactions FieldTransaction[] @relation("FieldTransactionPlayer")
}

model GameMoves {
    id        String   @id @default(uuid())
    gameId    String
    action    String
    playerId  String
    player    Player   @relation(fields: [playerId], references: [id])
    game      Game     @relation(name: "GameMovesGame", fields: [gameId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GameField {
    id        String   @id @default(uuid())
    gameId    String
    playerId  String
    fieldId   String
    cost      Float
    player    Player   @relation(fields: [playerId], references: [id])
    game      Game     @relation(fields: [gameId], references: [id])
    field     Field    @relation(fields: [fieldId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id                String             @id @default(uuid())
    amount            Float
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    playerId          String
    player            Player             @relation(fields: [playerId], references: [id])
    fieldTransactions FieldTransaction[]
}

model FieldTransaction {
    id            String      @id @default(uuid())
    gameId        String
    transactionId String
    playerId      String
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    game          Game        @relation(name: "FieldTransactionGame", fields: [gameId], references: [id])
    player        Player      @relation(name: "FieldTransactionPlayer", fields: [playerId], references: [id])
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Field {
    id         String      @id @default(uuid())
    name       String
    price      Float
    groupId    String
    gameId     String
    game       Game        @relation(name: "GameFieldRelation", fields: [gameId], references: [id])
    group      Group       @relation(fields: [groupId], references: [id])
    gameFields GameField[]
}

model Group {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    color     String
    fields    Field[]
}

enum ROLE {
    USER
    ADMIN
}
