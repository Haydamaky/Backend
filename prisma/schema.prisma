generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    userId    Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String  @unique
    hash     String
    hashedRt String?

    nickname               String
    isEmailConfirmed       Boolean @default(false)
    emailConfirmationToken String  @default("")

    requestedBy  Follow[]  @relation("requestedBy")
    requested    Follow[]  @relation("requested")
    sentMessages Message[] @relation("sentMessages")
    chats        Chat[]
}

enum FollowStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Follow {
    requestedBy   User @relation("requestedBy", fields: [requestedById], references: [userId])
    requestedById Int
    requested     User @relation("requested", fields: [requestedId], references: [userId])
    requestedId   Int

    status    FollowStatus @default(PENDING)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    @@id([requestedId, requestedById])
}

model Message {
    messageId Int      @id @default(autoincrement())
    text      String
    senderId  Int
    sender    User     @relation(name: "sentMessages", fields: [senderId], references: [userId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    chat      Chat?    @relation(fields: [chatId], references: [chatId])
    chatId    Int?
}

enum ChatType {
    MUTUAL
    PRIVATE
    GAME
}

model Chat {
    chatId       Int       @id @default(autoincrement())
    type         ChatType
    messages     Message[]
    participants User[]
}
